/*@MINIFY=TRUE*/

//simple call to get all completed (MOLINA)
$.fn.animateCSS = function (effect, delay, complete) {

    if (typeof delay == 'function' && typeof complete == "undefined") {
        complete = delay;
        delay = 0;
    }

    this.animateCustomCSS(effect, {
        delay: delay,
        onCompleteAll: complete
    });



}

$.fn.extend({
    animateCustomCSS: function (classes, options) {
         

        var $this = this;
       

        var settings = {
            duration: 800,
            delay: 0,
            easing: "cubic-bezier(0.785, 0.135, 0.150, 0.860)",
            eachElement: { addDuration: 0, addDelay: 0, randomizeDuration: 0, randomizeDelay: 0 },
            autoHide: false,
            onComplete: null,
            onCompleteAll: null  //(MOLINA)
        };

        var animateClasses = "nenhumEfeito flash bounce shake tada swing wobble pulse flip flipInX flipOutX flipInY flipOutY fadeIn fadeInUp fadeInDown fadeInLeft fadeInRight fadeInUpBig fadeInDownBig fadeInLeftBig fadeInRightBig fadeOut fadeOutUp fadeOutDown fadeOutLeft fadeOutRight fadeOutUpBig fadeOutDownBig fadeOutLeftBig fadeOutRightBig bounceIn bounceInDown bounceInUp bounceInLeft bounceInRight bounceOut bounceOutDown bounceOutUp bounceOutLeft bounceOutRight rotateIn rotateInDownLeft rotateInDownRight rotateInUpLeft rotateInUpRight rotateOut rotateOutDownLeft rotateOutDownRight rotateOutUpLeft rotateOutUpRight hinge rollIn rollOut";
       

        var totaltimes = $(this).length;
        return this.each(function (index) {

            if (options) $.extend(settings, options);
            var aDu = settings.eachElement.addDuration,
                aDe = settings.eachElement.addDelay,
                rDu = settings.eachElement.randomizeDuration,
                rDe = settings.eachElement.randomizeDelay;

            var obj = $(this),
                duration = settings.duration,
                delay = settings.delay,
                onComplete = settings.onComplete,
                onCompleteAll = settings.onCompleteAll,
                easing = settings.easing;

            duration = settings.duration - (settings.duration * Math.random().toFixed(3) * rDu) + (aDu - aDu * Math.random().toFixed(3) * rDu) * index;
            delay = settings.delay - (settings.delay * Math.random().toFixed(3) * rDe) + (aDe - aDe * Math.random().toFixed(3) * rDe) * index;


            obj.removeClass(animateClasses).show().css({
                "-ms-transition-timing-function": easing,
                "-moz-transition-timing-function": easing,
                "-moz-transition-timing-function": easing,
                "transition-timing-function": easing,
                "-ms-animation-duration": duration + "ms",
                "-webkit-animation-duration": duration + "ms",
                "-moz-animation-duration": duration + "ms",
                "animation-duration": duration + "ms",
                "-ms-animation-delay": delay + "ms",
                "-webkit-animation-delay": delay + "ms",
                "-moz-animation-delay": delay + "ms",
                "animation-delay": delay + "ms"

            }).addClass("animated " + classes);

            //this bind method below was modified because the original method was using a timeout 
            //and this showed a lag and a little "flash" when  the animation ended
            var transitionEnd = "webkitAnimationEnd oanimationend msAnimationEnd animationend";

            setTimeout(function () {
                $this.bind(transitionEnd, function () {

                    $this.unbind(transitionEnd);

                    obj.removeClass("animated " + classes);
                    if (settings.autoHide) {
                        obj.css('opacity', '0');
                    } else {
                        obj.css('opacity', '1');
                    }

                    //calling callback onComplete (MOLINA)
                    if (settings.onComplete) settings.onComplete(index, obj);

                    //decreasing timer counter to analyse onCompleteAll (MOLINA)
                    totaltimes -= 1;

                    //call onCompleteAll (MOLINA)
                    if (settings.onCompleteAll) {

                        if (totaltimes == 0) {

                            settings.onCompleteAll($this);

                        }
                    }

                })
            }, 1);

        });

        return ret;

    }
});
